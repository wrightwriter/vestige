import os
import subprocess
import shutil
import sys

arguments_string = ' '.join(sys.argv[1:])
# arguments_string = ' --no-renaming '

# Define the directory containing the shader files
shader_dir = r'src\shaders'

# Define the directory to store the generated .inl files
inl_dir = os.path.join(shader_dir, 'inl_files')

# Ensure the inl directory exists, and clear its contents
if os.path.exists(inl_dir):
    shutil.rmtree(inl_dir)  # Remove the directory and all its contents
os.makedirs(inl_dir)  # Recreate the directory

# Define the name of the output file generated by shader_minifier
output_inl_file = os.path.join(inl_dir, 'shader_includes.h')

# List to keep track of all shader files
shader_files = []

# Loop over all files in the shader directory
for file_name in os.listdir(shader_dir):
    # Check if the file is a .frag or .comp file
    if file_name.endswith('.frag') or file_name.endswith('.comp'):
        # Add the full path of the shader file to the list
        shader_files.append(f'"{os.path.join(shader_dir, file_name)}"')

# Construct the full command with the output file and input shader files
full_command = f'shader_minifier.exe -v --preserve-externals  {arguments_string}  -o "{output_inl_file}" {" ".join(shader_files)}'
#full_command = f'shader_minifier.exe -v {arguments_string}  -o "{output_inl_file}" {" ".join(shader_files)}'
print(full_command)

# Run the full command in a single subprocess call
subprocess.run(full_command, shell=True, check=True)

# Replace all instances of 'const char*' with 'static const char*' in the generated shader_includes.h file
with open(output_inl_file, 'r') as file:
    file_data = file.read()

# Replace 'const char*' with 'static const char*'
file_data = file_data.replace('const char *', 'static const char* ')

# Write the changes back to the file
with open(output_inl_file, 'w') as file:
    file.write(file_data)

# Define the output header file that includes the shader_includes.h
output_header = os.path.join(shader_dir, 'all_shaders.h')

# Write the include directive to the header file
with open(output_header, 'w') as header_file:
    header_file.write('// Automatically generated shader includes\n\n')
    header_file.write(f'#include "inl_files/shader_includes.h"\n')

print(f'Header file {output_header} has been generated successfully.')


def ensure_newlines(file_path):
    # Read the file content
    with open(file_path, "r") as file:
        lines = file.readlines()

    modified_lines = []

    # Process each line to ensure it ends with '\n'
    for line in lines:
        # Check if the line is non-empty and does not end with a newline
        stripped_line = line.rstrip()
        # if stripped_line.startswith('"') and not stripped_line.endswith('\\n"'):
        if stripped_line.endswith('"') and not stripped_line.endswith('\\n"'):
            modified_lines.append(stripped_line[:-1] + '\\n"\n')  # Add '\n' before closing quote
        else:
            modified_lines.append(line)

    # Write the modified content back to the file or a new file
    with open(file_path, "w") as file:
        file.writelines(modified_lines)

    print(f"Processed file: {file_path}")


ensure_newlines(output_inl_file)
